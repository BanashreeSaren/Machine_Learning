#Decission tree regressor
import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

# Load your dataset (replace 'your_dataset.csv' with the actual dataset file)
dataset = pd.read_csv('D:/STUDY & WORK/Sem3/Machine Learning/Mini Project/CSV/2020_Air_alldata.csv')

# Define your features (independent variables) and target (dependent variable)
X = dataset.drop('RH', axis=1)  # Replace with your actual feature columns
y = dataset['RH']  # Replace with your actual target column

# Perform feature scaling (Normalization)
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)
y_scaled = scaler.fit_transform(y.values.reshape(-1, 1))

# Split the data into a training and testing set
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_scaled, test_size=0.2, random_state=42)

# Train a Decision Tree Regressor model
model = DecisionTreeRegressor(random_state=42)
model.fit(X_train, y_train.ravel())  # ravel() is used to flatten y_train

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)

# Calculate Root Mean Squared Error (RMSE)
rmse = np.sqrt(mse)

# Calculate R-squared (R2) score
r2score = r2_score(y_test, y_pred)

print("Mean Squared Error (MSE):", mse)
print("Root Mean Squared Error (RMSE):", rmse)
print("R-squared (R2) Score:", r2score)
